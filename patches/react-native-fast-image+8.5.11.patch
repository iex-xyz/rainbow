diff --git a/node_modules/react-native-fast-image/android/src/main/java/com/dylanvann/fastimage/FastImageViewModule.java b/node_modules/react-native-fast-image/android/src/main/java/com/dylanvann/fastimage/FastImageViewModule.java
index 019032b..aae8e6c 100644
--- a/node_modules/react-native-fast-image/android/src/main/java/com/dylanvann/fastimage/FastImageViewModule.java
+++ b/node_modules/react-native-fast-image/android/src/main/java/com/dylanvann/fastimage/FastImageViewModule.java
@@ -1,9 +1,15 @@
 package com.dylanvann.fastimage;
 
 import android.app.Activity;
+import androidx.annotation.Nullable;
 
 import com.bumptech.glide.Glide;
+import com.bumptech.glide.load.DataSource;
+import com.bumptech.glide.load.engine.GlideException;
 import com.bumptech.glide.load.model.GlideUrl;
+import com.bumptech.glide.request.RequestListener;
+import com.bumptech.glide.request.target.Target;
+import com.facebook.react.bridge.Promise;
 import com.facebook.react.bridge.Promise;
 import com.facebook.react.bridge.ReactApplicationContext;
 import com.facebook.react.bridge.ReactContextBaseJavaModule;
@@ -12,9 +18,12 @@ import com.facebook.react.bridge.ReadableArray;
 import com.facebook.react.bridge.ReadableMap;
 import com.facebook.react.views.imagehelper.ImageSource;
 
+import java.io.File;
+
 class FastImageViewModule extends ReactContextBaseJavaModule {
 
     private static final String REACT_CLASS = "FastImageView";
+    private static final String ERROR_LOAD_FAILED = "ERROR_LOAD_FAILED";
 
     FastImageViewModule(ReactApplicationContext reactContext) {
         super(reactContext);
@@ -83,4 +92,43 @@ class FastImageViewModule extends ReactContextBaseJavaModule {
         Glide.get(activity.getApplicationContext()).clearDiskCache();
         promise.resolve(null);
     }
+
+    @ReactMethod
+    public void getCachePath(final ReadableMap source, final Promise promise) {
+        final Activity activity = getCurrentActivity();
+        if (activity == null) return;
+
+        activity.runOnUiThread(new Runnable() {
+            @Override
+            public void run() {
+                final FastImageSource imageSource = FastImageViewConverter.getImageSource(activity, source);
+                final GlideUrl glideUrl = imageSource.getGlideUrl();
+
+                if (glideUrl == null) {
+                    promise.resolve(null);
+                    return;
+                }
+
+                Glide
+                    .with(activity.getApplicationContext())
+                    .asFile()
+                    .load(glideUrl)
+                    .apply(FastImageViewConverter.getOptions(activity, imageSource,  source))
+                    .listener(new RequestListener<File>() {
+                        @Override
+                        public boolean onLoadFailed(@Nullable GlideException e, Object model, Target<File> target, boolean isFirstResource) {
+                            promise.reject(ERROR_LOAD_FAILED, e);
+                            return false;
+                        }
+
+                        @Override
+                        public boolean onResourceReady(File resource, Object model, Target<File> target, DataSource dataSource, boolean isFirstResource) {
+                            promise.resolve(resource.getAbsolutePath());
+                            return false;
+                        }
+                    })
+                    .submit();
+            }
+        });
+    }
 }
